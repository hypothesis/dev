#!/usr/bin/env python3
import argparse
import os
import subprocess
from functools import lru_cache


class StandardProject:
    def __init__(self, tox, verbose):
        self.run = Run(tox, verbose)

    @property
    @lru_cache()
    def files(self):
        """
        All files modified on this branch compared to master.

        Includes both committed and uncommitted, staged and unstaged changes.

        If a source file has been modified then its corresponding unit test
        file will be included even if the unit test file itself hasn't been
        modified, and vice-versa.

        FIXME: This should also include untracked files.
        """
        modified_files = set(
            subprocess.run(
                ["git", "diff", "origin/master", "--name-only"],
                check=True,
                stdout=subprocess.PIPE,
            )
            .stdout.decode("utf8")
            .split()
        )

        files = set(modified_files)

        for f in modified_files:
            if self.is_src_file(f):
                test_filename = self.test_filename(f)
                if os.path.exists(test_filename):
                    files.add(test_filename)
            elif self.is_unit_test_file(f):
                src_filename = self.src_filename(f)
                if os.path.exists(src_filename):
                    files.add(src_filename)

        return files

    @lru_cache()
    def is_python_file(self, filename):
        """Return True if `filename` is a Python file."""
        return filename.endswith(".py")

    @lru_cache()
    def is_src_file(self, filename):
        """Return True if `filename` is a source file (as opposed to a test file)."""
        return not self.is_test_file(filename)

    @lru_cache()
    def is_test_file(self, filename):
        """Return True if `filename` is a test file."""
        return filename.startswith("tests/")

    @lru_cache()
    def is_unit_test_file(self, filename):
        """Return True if `filename` is a unit test file."""
        return filename.startswith("tests/unit")

    @lru_cache()
    def is_functest_file(self, filename):
        """Return True if `filename` is a functional test file."""
        return filename.startswith("tests/functional")

    @property
    @lru_cache()
    def python_files(self):
        """All Python files modified on this branch compared to master."""
        return set(f for f in self.files if self.is_python_file(f))

    @property
    @lru_cache()
    def src_files(self):
        """All source files modified on this branch compared to master."""
        return set(f for f in self.python_files if self.is_src_file(f))

    @property
    @lru_cache()
    def test_files(self):
        """All test files modified on this branch compared to master."""
        return set(f for f in self.python_files if self.is_test_file(f))

    @property
    @lru_cache()
    def unit_test_files(self):
        """All unit test files modified on this branch compared to master."""
        return set(f for f in self.python_files if self.is_unit_test_file(f))

    @property
    @lru_cache()
    def func_test_files(self):
        """All functional test files modified on this branch compared to master."""
        return set(f for f in self.python_files if self.is_functest_file(f))

    @lru_cache()
    def test_filename(self, filename):
        """
        Return the test filename for the given source `filename`.

        This doesn't check that the returned test filename actually exists: it
        just returns the path to where the test file _should_ be according to
        the project's file layout conventions.
        """
        return "tests/unit/" + os.path.splitext(filename)[0] + "_test.py"

    @lru_cache()
    def src_filename(self, filename):
        """
        Return the source filename for the given test `filename`.

        This doesn't check that the returned source filename actually exists:
        it just returns the path to where the source file _should_ be according
        to the project's file layout conventions.
        """
        return filename[len("tests/unit/") :][: -len("_test.py")] + ".py"

    def format(self):
        """Run the formatter(s) on all modified files."""
        if not self.python_files:
            return

        # FIXME: This should also run isort.
        self.run("format", "black", self.python_files)

    def lint(self):
        """Run the linter(s) on all modified files."""
        if self.src_files:
            self.run("lint", "pylint", self.src_files)
            self.run("lint", "pycodestyle", self.src_files)
            self.run("lint", "pydocstyle", self.src_files)

        if self.test_files:
            self.run("lint", "pylint", self.test_files, "--rcfile=tests/.pylintrc")

    def run_unit_tests(self):
        """Run the unit tests for all modified files."""
        if self.unit_test_files:
            self.run("tests", "coverage run -m pytest", self.unit_test_files)

    def run_coverage(self):
        """Print a coverage report for all modified files."""
        if not self.python_files:
            return

        self.run("tests", "coverage combine", [])
        self.run(
            "tests",
            "coverage report",
            [],
            "--fail-under=0 --no-skip-covered --include " + ",".join(self.python_files),
        )

    def run_functional_tests(self):
        """Run all modified functional test files."""
        if self.func_test_files:
            self.run("functests", "pytest", self.func_test_files)

    def run_all(self):
        """Run all the checks for all the modified files."""
        self.format()
        self.lint()
        self.run_unit_tests()
        self.run_coverage()
        self.run_functional_tests()


class HProject(StandardProject):
    @lru_cache()
    def is_unit_test_file(self, filename):
        """Return True if `filename` is a unit test file."""
        return filename.startswith("tests/h")

    def lint(self):
        """Run the linter(s) on all modified files."""
        if self.src_files:
            self.run("lint", "flake8", self.src_files)

        if self.test_files:
            self.run("lint", "flake8", self.test_files)


class Run:
    def __init__(self, tox, verbose):
        self._tox = tox
        self._verbose = verbose

    def __call__(self, env, cmd, files, options=""):
        files = " ".join(files)

        cmd_fmt = ".tox/{env}/bin/{cmd} {args}"
        tox_fmt = "tox -qqe {env} --run-command '{cmd} {args}'"

        if self._tox:
            fmt = tox_fmt
        else:
            fmt = cmd_fmt

        if options:
            args = [options, files]
        else:
            args = [files]

        cmd = fmt.format(env=env, cmd=cmd, args=" ".join(args))

        if self._verbose:
            print(cmd)

        subprocess.run(cmd, shell=True, check=True)


def main():
    parser = argparse.ArgumentParser(
        description="Format, lint and test only the files that have changed on this branch.",
        epilog="By default commands are run directly rather than with tox. "
        "This is faster but it can fail because it doesn't allow tox to "
        "create virtualenvs and install and update dependencies. If you run "
        "into a problem try running `%(prog)s -t` once to run the commands in "
        "tox and see if that fixes it, then go back to running `%(prog)s` "
        "without -t.",
    )
    parser.add_argument(
        "-t",
        "--tox",
        action="store_true",
        help="run commands in tox instead of directly",
    )
    parser.add_argument("-v", "--verbose", action="store_true")

    args = parser.parse_args()

    if os.path.isdir("h"):
        ProjectClass = HProject
    else:
        ProjectClass = StandardProject

    ProjectClass(args.tox, args.verbose).run_all()


if __name__ == "__main__":
    main()
